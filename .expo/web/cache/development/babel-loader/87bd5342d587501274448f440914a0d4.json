{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"/Users/stanleyjeong/Desktop/_CODING/_PROJECTS 25 projects/z_SJ_Portfolio 2020/MEMOIR/Memoir/navigation/tab-screens/meditate-screens-more/MeditateExerciseScreen.jsx\";\nimport React, { useEffect, useState, useRef, useCallback, useContext } from 'react';\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport StatusBar from \"react-native-web/dist/exports/StatusBar\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport Vibration from \"react-native-web/dist/exports/Vibration\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport ImageBackground from \"react-native-web/dist/exports/ImageBackground\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport TouchableHighlight from \"react-native-web/dist/exports/TouchableHighlight\";\nimport TouchableWithoutFeedback from \"react-native-web/dist/exports/TouchableWithoutFeedback\";\nimport AppState from \"react-native-web/dist/exports/AppState\";\nimport AppButton from \"../../../components/AppButton\";\nimport { useIsFocused } from '@react-navigation/native';\nimport { useFonts } from 'expo-font';\n\nvar bgImage = require(\"../../../assets/splash/memoir-splash-thin-4x.png\");\n\nimport { useNavigation } from '@react-navigation/native';\nimport { AuthContext } from \"../../../components/context\";\nimport { Audio } from 'expo-av';\nimport { useKeepAwake } from 'expo-keep-awake';\n\nvar _Dimensions$get = Dimensions.get('window'),\n    width = _Dimensions$get.width,\n    height = _Dimensions$get.height;\n\nimport firebase from 'firebase';\nexport default function MeditateExerciseScreen(_ref) {\n  var route = _ref.route,\n      navigation = _ref.navigation;\n  useKeepAwake();\n  var isFocused = useIsFocused();\n\n  var _useFonts = useFonts({\n    'Assistant': require(\"../../../assets/fonts/Assistant/Assistant-VariableFont_wght.ttf\"),\n    'Assistant-Regular': require(\"../../../assets/fonts/Assistant/static/Assistant-Regular.ttf\"),\n    'Assistant-SemiBold': require(\"../../../assets/fonts/Assistant/static/Assistant-SemiBold.ttf\")\n  }),\n      _useFonts2 = _slicedToArray(_useFonts, 1),\n      fontsLoaded = _useFonts2[0];\n\n  var _useContext = useContext(AuthContext),\n      userToken = _useContext.userToken;\n\n  var _useState = useState(true),\n      _useState2 = _slicedToArray(_useState, 2),\n      overlay = _useState2[0],\n      setOverlay = _useState2[1];\n\n  var overlayFade = useRef(new Animated.Value(0)).current;\n\n  var overlayFader = function overlayFader() {\n    Animated.timing(overlayFade, {\n      toValue: overlay ? 1 : 0,\n      duration: 200,\n      useNativeDriver: true\n    }).start();\n  };\n\n  var touchScreenToggleControls = function touchScreenToggleControls() {\n    setOverlay(!overlay);\n    overlayFader();\n  };\n\n  var _route$params = route.params,\n      minutes = _route$params.minutes,\n      bellInterv = _route$params.bellInterv;\n\n  var _useState3 = useState(true),\n      _useState4 = _slicedToArray(_useState3, 2),\n      timerRunning = _useState4[0],\n      setTimerRunning = _useState4[1];\n\n  var _useState5 = useState(minutes),\n      _useState6 = _slicedToArray(_useState5, 2),\n      mins = _useState6[0],\n      setMins = _useState6[1];\n\n  var _useState7 = useState(0),\n      _useState8 = _slicedToArray(_useState7, 2),\n      secs = _useState8[0],\n      setSecs = _useState8[1];\n\n  function leadingZero(time) {\n    if (time <= 9) {\n      time = \"0\" + time;\n    }\n\n    return time;\n  }\n\n  var countDown = function countDown() {\n    if (secs > 0) {\n      setSecs(secs - 1);\n    } else if (mins >= 1 && secs == 0) {\n      setSecs(59);\n      setMins(mins - 1);\n    } else {\n      updateUserTime();\n      incrementSessionsCompleted();\n      Alert.alert(\"Timer Complete\", \"Great job, youâ€™ve completed your meditation session!\", [{\n        text: \"Back\",\n        onPress: function onPress() {\n          return navigation.goBack();\n        }\n      }, {\n        text: \"Finish\",\n        style: \"cancel\",\n        onPress: function onPress() {\n          return navigation.navigate(\"Profile\");\n        }\n      }]);\n      setTimerRunning(false);\n      bellSound.unloadAsync();\n      loadFinishedSound();\n      clear();\n      setTimeout(function () {\n        finishedSound.unloadAsync();\n        bellSound.unloadAsync();\n      }, 6000);\n    }\n\n    console.log(sessionSecs);\n    setSessionSecs(function (sessionSecs) {\n      return sessionSecs += 1;\n    });\n  };\n\n  var bellSound = new Audio.Sound();\n  Audio.setAudioModeAsync({\n    playsInSilentModeIOS: true,\n    staysActiveInBackground: true\n  });\n\n  var playBell = function playBell() {\n    return _regeneratorRuntime.async(function playBell$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return _regeneratorRuntime.awrap(bellSound.replayAsync());\n\n          case 2:\n            return _context.abrupt(\"return\", _context.sent);\n\n          case 3:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  var playBellFirst = function playBellFirst() {\n    return _regeneratorRuntime.async(function playBellFirst$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.next = 2;\n            return _regeneratorRuntime.awrap(bellSound.playAsync());\n\n          case 2:\n            return _context2.abrupt(\"return\", _context2.sent);\n\n          case 3:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  var loadSound = function loadSound() {\n    return _regeneratorRuntime.async(function loadSound$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            _context3.prev = 0;\n            _context3.next = 3;\n            return _regeneratorRuntime.awrap(bellSound.loadAsync(require(\"../../../assets/audio/singing-bowl.mp3\")));\n\n          case 3:\n            if (!(bellInterv === null)) {\n              _context3.next = 7;\n              break;\n            }\n\n            null;\n            _context3.next = 9;\n            break;\n\n          case 7:\n            _context3.next = 9;\n            return _regeneratorRuntime.awrap(bellSound.playAsync());\n\n          case 9:\n            console.log(\"load sound!\");\n            _context3.next = 15;\n            break;\n\n          case 12:\n            _context3.prev = 12;\n            _context3.t0 = _context3[\"catch\"](0);\n            console.log(_context3.t0);\n\n          case 15:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, null, null, [[0, 12]], Promise);\n  };\n\n  var finishedSound = new Audio.Sound();\n  Audio.setAudioModeAsync({\n    playsInSilentModeIOS: true,\n    staysActiveInBackground: true\n  });\n\n  var loadFinishedSound = function loadFinishedSound() {\n    return _regeneratorRuntime.async(function loadFinishedSound$(_context4) {\n      while (1) {\n        switch (_context4.prev = _context4.next) {\n          case 0:\n            _context4.prev = 0;\n            _context4.next = 3;\n            return _regeneratorRuntime.awrap(finishedSound.loadAsync(require(\"../../../assets/audio/meditation-finished-sound.mp3\")));\n\n          case 3:\n            _context4.next = 5;\n            return _regeneratorRuntime.awrap(finishedSound.playAsync());\n\n          case 5:\n            console.log(\"finished bell loaded!\");\n            _context4.next = 11;\n            break;\n\n          case 8:\n            _context4.prev = 8;\n            _context4.t0 = _context4[\"catch\"](0);\n            console.log(_context4.t0);\n\n          case 11:\n          case \"end\":\n            return _context4.stop();\n        }\n      }\n    }, null, null, [[0, 8]], Promise);\n  };\n\n  useEffect(function () {\n    loadSound();\n    console.log(\"useEffect loadSound mounted/started!\");\n    console.log(bellInterv);\n    return function () {\n      return bellSound.unloadAsync();\n    };\n  }, []);\n  useEffect(function () {\n    return function () {\n      return finishedSound.unloadAsync();\n    };\n  }, []);\n\n  var _useInterval = useInterval(function () {\n    countDown();\n  }, 1000),\n      _useInterval2 = _slicedToArray(_useInterval, 3),\n      toggleClock = _useInterval2[0],\n      runningClock = _useInterval2[1],\n      clear = _useInterval2[2];\n\n  var _useInterval3 = useInterval(function () {\n    timerRunning ? loadSound() : null;\n  }, bellInterv),\n      _useInterval4 = _slicedToArray(_useInterval3, 2),\n      toggleBell = _useInterval4[0],\n      runningBell = _useInterval4[1];\n\n  var toggle = function toggle() {\n    toggleClock();\n    bellInterv === null ? null : toggleBell();\n    setTimerRunning(!timerRunning);\n  };\n\n  var currUser = firebase.auth().currentUser;\n  var progressRef = currUser ? firebase.database().ref(currUser.uid).child('progress') : null;\n\n  var _useState9 = useState(0),\n      _useState10 = _slicedToArray(_useState9, 2),\n      sessionSecs = _useState10[0],\n      setSessionSecs = _useState10[1];\n\n  function updateUserTime() {\n    var timeSoFar;\n    return _regeneratorRuntime.async(function updateUserTime$(_context6) {\n      while (1) {\n        switch (_context6.prev = _context6.next) {\n          case 0:\n            if (!currUser) {\n              _context6.next = 4;\n              break;\n            }\n\n            _context6.next = 3;\n            return _regeneratorRuntime.awrap(progressRef.once('value', function _callee(snapshot) {\n              return _regeneratorRuntime.async(function _callee$(_context5) {\n                while (1) {\n                  switch (_context5.prev = _context5.next) {\n                    case 0:\n                      if (!(snapshot.val() === null)) {\n                        _context5.next = 13;\n                        break;\n                      }\n\n                      progressRef.set({\n                        practiceTime: 0,\n                        sessionsCompleted: 0,\n                        currentStreak: 0,\n                        bestStreak: 0\n                      });\n                      _context5.next = 4;\n                      return _regeneratorRuntime.awrap(snapshot.val());\n\n                    case 4:\n                      _context5.t0 = _context5.sent;\n\n                      if (!(_context5.t0 !== null)) {\n                        _context5.next = 9;\n                        break;\n                      }\n\n                      _context5.t1 = snapshot.val().practiceTime;\n                      _context5.next = 10;\n                      break;\n\n                    case 9:\n                      _context5.t1 = 0;\n\n                    case 10:\n                      timeSoFar = _context5.t1;\n                      _context5.next = 22;\n                      break;\n\n                    case 13:\n                      _context5.next = 15;\n                      return _regeneratorRuntime.awrap(snapshot.val());\n\n                    case 15:\n                      _context5.t2 = _context5.sent;\n\n                      if (!(_context5.t2 !== null)) {\n                        _context5.next = 20;\n                        break;\n                      }\n\n                      _context5.t3 = snapshot.val().practiceTime;\n                      _context5.next = 21;\n                      break;\n\n                    case 20:\n                      _context5.t3 = 0;\n\n                    case 21:\n                      timeSoFar = _context5.t3;\n\n                    case 22:\n                      _context5.next = 24;\n                      return _regeneratorRuntime.awrap(progressRef.update({\n                        practiceTime: timeSoFar += sessionSecs\n                      }));\n\n                    case 24:\n                    case \"end\":\n                      return _context5.stop();\n                  }\n                }\n              }, null, null, null, Promise);\n            }));\n\n          case 3:\n            setSessionSecs(0);\n\n          case 4:\n          case \"end\":\n            return _context6.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  }\n\n  ;\n\n  function incrementSessionsCompleted() {\n    var sessionsCompletedSoFar;\n    return _regeneratorRuntime.async(function incrementSessionsCompleted$(_context8) {\n      while (1) {\n        switch (_context8.prev = _context8.next) {\n          case 0:\n            if (!currUser) {\n              _context8.next = 3;\n              break;\n            }\n\n            _context8.next = 3;\n            return _regeneratorRuntime.awrap(progressRef.once('value', function _callee2(snapshot) {\n              return _regeneratorRuntime.async(function _callee2$(_context7) {\n                while (1) {\n                  switch (_context7.prev = _context7.next) {\n                    case 0:\n                      if (!(snapshot.val() === null)) {\n                        _context7.next = 13;\n                        break;\n                      }\n\n                      progressRef.set({\n                        practiceTime: 0,\n                        sessionsCompleted: 0,\n                        currentStreak: 0,\n                        bestStreak: 0\n                      });\n                      _context7.next = 4;\n                      return _regeneratorRuntime.awrap(snapshot.val());\n\n                    case 4:\n                      _context7.t0 = _context7.sent;\n\n                      if (!(_context7.t0 !== null)) {\n                        _context7.next = 9;\n                        break;\n                      }\n\n                      _context7.t1 = snapshot.val().sessionsCompleted;\n                      _context7.next = 10;\n                      break;\n\n                    case 9:\n                      _context7.t1 = 0;\n\n                    case 10:\n                      sessionsCompletedSoFar = _context7.t1;\n                      _context7.next = 22;\n                      break;\n\n                    case 13:\n                      _context7.next = 15;\n                      return _regeneratorRuntime.awrap(snapshot.val());\n\n                    case 15:\n                      _context7.t2 = _context7.sent;\n\n                      if (!(_context7.t2 !== null)) {\n                        _context7.next = 20;\n                        break;\n                      }\n\n                      _context7.t3 = snapshot.val().sessionsCompleted;\n                      _context7.next = 21;\n                      break;\n\n                    case 20:\n                      _context7.t3 = 0;\n\n                    case 21:\n                      sessionsCompletedSoFar = _context7.t3;\n\n                    case 22:\n                      _context7.next = 24;\n                      return _regeneratorRuntime.awrap(progressRef.update({\n                        sessionsCompleted: sessionsCompletedSoFar += 1\n                      }));\n\n                    case 24:\n                    case \"end\":\n                      return _context7.stop();\n                  }\n                }\n              }, null, null, null, Promise);\n            }));\n\n          case 3:\n          case \"end\":\n            return _context8.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  }\n\n  ;\n\n  var goBack = function goBack() {\n    updateUserTime();\n    navigation.goBack();\n  };\n\n  return React.createElement(ImageBackground, {\n    source: bgImage,\n    style: {\n      flex: 1,\n      resizeMode: \"cover\",\n      position: \"relative\",\n      zIndex: -10\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 358,\n      columnNumber: 5\n    }\n  }, isFocused ? React.createElement(StatusBar, {\n    hidden: false,\n    barStyle: \"light-content\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 359,\n      columnNumber: 20\n    }\n  }) : null, React.createElement(Animated.View, {\n    style: {\n      width: width,\n      flexDirection: \"row\",\n      alignItems: \"center\",\n      marginTop: height * 0.07,\n      position: \"absolute\",\n      zIndex: 100,\n      opacity: overlayFade\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 361,\n      columnNumber: 7\n    }\n  }, React.createElement(TouchableOpacity, {\n    onPress: goBack,\n    style: {\n      padding: 15\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 362,\n      columnNumber: 9\n    }\n  }, React.createElement(Image, {\n    source: require(\"../../../assets/screen-icons/back-arrow-white.png\"),\n    style: {\n      height: 20,\n      marginLeft: 0\n    },\n    resizeMode: \"contain\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 363,\n      columnNumber: 11\n    }\n  })), React.createElement(Text, {\n    style: {\n      textAlign: \"center\",\n      fontSize: 23,\n      fontFamily: \"Assistant-SemiBold\",\n      color: 'white',\n      position: \"absolute\",\n      zIndex: -1,\n      width: width\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 365,\n      columnNumber: 9\n    }\n  }, \"Meditate\")), React.createElement(View, {\n    style: {\n      justifyContent: \"center\",\n      position: \"absolute\",\n      height: height,\n      width: width\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 369,\n      columnNumber: 7\n    }\n  }, React.createElement(View, {\n    style: {\n      padding: 20,\n      alignItems: \"center\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 370,\n      columnNumber: 9\n    }\n  }, React.createElement(Text, {\n    style: {\n      fontFamily: \"Assistant\",\n      color: \"white\",\n      fontSize: 67\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 371,\n      columnNumber: 9\n    }\n  }, leadingZero(mins) + \":\" + leadingZero(secs)), React.createElement(TouchableOpacity, {\n    onPress: function onPress() {\n      return toggle();\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 376,\n      columnNumber: 11\n    }\n  }, timerRunning ? React.createElement(Image, {\n    source: require(\"../../../assets/screen-icons/pause-circle.png\"),\n    style: {\n      height: 66,\n      width: 66\n    },\n    resizeMode: \"contain\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 378,\n      columnNumber: 13\n    }\n  }) : React.createElement(Image, {\n    source: require(\"../../../assets/screen-icons/play-circle.png\"),\n    style: {\n      height: 66,\n      width: 66\n    },\n    resizeMode: \"contain\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 380,\n      columnNumber: 13\n    }\n  })))), React.createElement(TouchableWithoutFeedback, {\n    onPress: touchScreenToggleControls,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 390,\n      columnNumber: 9\n    }\n  }, React.createElement(View, {\n    style: {\n      height: height * 0.51,\n      width: width,\n      position: \"absolute\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 391,\n      columnNumber: 11\n    }\n  })), React.createElement(TouchableWithoutFeedback, {\n    onPress: touchScreenToggleControls,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 396,\n      columnNumber: 9\n    }\n  }, React.createElement(View, {\n    style: {\n      height: height * 0.39,\n      width: width,\n      position: \"absolute\",\n      bottom: 0\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 397,\n      columnNumber: 11\n    }\n  })));\n}\nvar styles = StyleSheet.create({\n  blueButton: {\n    backgroundColor: \"#3681C7\",\n    height: 51,\n    width: 234,\n    borderRadius: 17,\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    shadowRadius: 7,\n    shadowColor: \"black\",\n    shadowOpacity: 0.2,\n    shadowOffset: {\n      width: 3,\n      height: 3\n    }\n  },\n  buttonText: {\n    color: \"#fff\",\n    flex: 1,\n    textAlign: \"center\",\n    fontSize: 22,\n    letterSpacing: 1,\n    fontFamily: \"Assistant-SemiBold\"\n  }\n});\n\nfunction useInterval(callback, delay) {\n  var savedCallback = useRef();\n  var intervalId = useRef(null);\n\n  var _useState11 = useState(delay),\n      _useState12 = _slicedToArray(_useState11, 2),\n      currentDelay = _useState12[0],\n      setDelay = _useState12[1];\n\n  var toggleRunning = useCallback(function () {\n    return setDelay(function (currentDelay) {\n      return currentDelay === null ? delay : null;\n    });\n  }, [delay]);\n  var clear = useCallback(function () {\n    return clearInterval(intervalId.current);\n  }, []);\n  useEffect(function () {\n    savedCallback.current = callback;\n  }, [callback]);\n  useEffect(function () {\n    function tick() {\n      savedCallback.current();\n    }\n\n    if (intervalId.current) clear();\n\n    if (currentDelay !== null) {\n      intervalId.current = setInterval(tick, currentDelay);\n    }\n\n    return clear;\n  }, [currentDelay, clear]);\n  return [toggleRunning, !!currentDelay, clear];\n}","map":{"version":3,"sources":["/Users/stanleyjeong/Desktop/_CODING/_PROJECTS 25 projects/z_SJ_Portfolio 2020/MEMOIR/Memoir/navigation/tab-screens/meditate-screens-more/MeditateExerciseScreen.jsx"],"names":["React","useEffect","useState","useRef","useCallback","useContext","AppButton","useIsFocused","useFonts","bgImage","require","useNavigation","AuthContext","Audio","useKeepAwake","Dimensions","get","width","height","firebase","MeditateExerciseScreen","route","navigation","isFocused","fontsLoaded","userToken","overlay","setOverlay","overlayFade","Animated","Value","current","overlayFader","timing","toValue","duration","useNativeDriver","start","touchScreenToggleControls","params","minutes","bellInterv","timerRunning","setTimerRunning","mins","setMins","secs","setSecs","leadingZero","time","countDown","updateUserTime","incrementSessionsCompleted","Alert","alert","text","onPress","goBack","style","navigate","bellSound","unloadAsync","loadFinishedSound","clear","setTimeout","finishedSound","console","log","sessionSecs","setSessionSecs","Sound","setAudioModeAsync","playsInSilentModeIOS","staysActiveInBackground","playBell","replayAsync","playBellFirst","playAsync","loadSound","loadAsync","useInterval","toggleClock","runningClock","toggleBell","runningBell","toggle","currUser","auth","currentUser","progressRef","database","ref","uid","child","once","snapshot","val","set","practiceTime","sessionsCompleted","currentStreak","bestStreak","timeSoFar","update","sessionsCompletedSoFar","flex","resizeMode","position","zIndex","flexDirection","alignItems","marginTop","opacity","padding","marginLeft","textAlign","fontSize","fontFamily","color","justifyContent","bottom","styles","StyleSheet","create","blueButton","backgroundColor","borderRadius","shadowRadius","shadowColor","shadowOpacity","shadowOffset","buttonText","letterSpacing","callback","delay","savedCallback","intervalId","currentDelay","setDelay","toggleRunning","clearInterval","tick","setInterval"],"mappings":"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","sourcesContent":["import React, { useEffect, useState, useRef, useCallback, useContext } from 'react';\nimport { Animated, Text, View, StatusBar, Button, Alert, Vibration, Image, Dimensions, StyleSheet, ImageBackground, TouchableOpacity, TouchableHighlight, TouchableWithoutFeedback, AppState } from 'react-native';\nimport AppButton from '../../../components/AppButton';\nimport { useIsFocused } from '@react-navigation/native';\nimport { useFonts } from 'expo-font';\nconst bgImage = require('../../../assets/splash/memoir-splash-thin-4x.png');\nimport { useNavigation } from '@react-navigation/native';\nimport { AuthContext } from '../../../components/context';\n\n// import BackgroundTimer from 'react-native-background-timer'; ONLY WORKS IN 'BARE' WORKFLOW IT SEEMS.\n\nimport { Audio } from 'expo-av';\nimport { useKeepAwake } from 'expo-keep-awake';\n\nconst { width, height } = Dimensions.get('window');\n\nimport firebase from 'firebase';\n\n\nexport default function MeditateExerciseScreen({ route, navigation }) {\n  useKeepAwake();\n  const isFocused = useIsFocused();\n\n\n  // // AppState stuff\n  // const appState = useRef(AppState.currentState);\n  // const [appStateVisible, setAppStateVisible] = useState(appState.current);\n\n  // useEffect(() => {\n  //   AppState.addEventListener(\"change\", _handleAppStateChange);\n  //   console.log(\"CHANGE!! AppState active inactive thing!\")\n\n  //   return () => AppState.removeEventListener(\"change\", _handleAppStateChange);\n  // }, []);\n\n  // const _handleAppStateChange = nextAppState => {\n  //   if (appState.current.match(/inactive|background/) && nextAppState === \"active\") {\n  //     console.log(\"App has come to the foreground!\");\n  //   }\n  //   appState.current = nextAppState;\n  //   setAppStateVisible(appState.current);\n  //   console.log(\"AppState:\", appState.current);\n  // }\n\n  \n  let [fontsLoaded] = useFonts({\n    'Assistant': require('../../../assets/fonts/Assistant/Assistant-VariableFont_wght.ttf'),\n    'Assistant-Regular': require('../../../assets/fonts/Assistant/static/Assistant-Regular.ttf'),\n    'Assistant-SemiBold': require('../../../assets/fonts/Assistant/static/Assistant-SemiBold.ttf'),\n  });\n  \n  const { userToken } = useContext(AuthContext);\n  \n  const [ overlay, setOverlay ] = useState(true);\n  const overlayFade = useRef(new Animated.Value(0)).current;\n\n  const overlayFader = () => {\n    Animated.timing(overlayFade, {\n      toValue: overlay ? 1 : 0,\n      duration: 200,\n      useNativeDriver: true\n    }).start();\n  }; \n\n  const touchScreenToggleControls = () => {\n    setOverlay(!overlay);\n    overlayFader();\n  }\n\n\n\n\n\n\n\n  // // THE CLOCK\n  // // SET TIMEOUT WAY - BINGO\n  // let secsTimer;\n  // const startCountDown = () => {\n  //   if (timerRunning) {\n  //     if (secs > 0) {\n  //       secsTimer = setTimeout(() => {\n  //         setSecs(secs - 1);\n  //       }, 1000);\n  //     } else if (mins >= 1 && secs == 0) {\n  //       let minsTimer = setTimeout(() => {\n  //         setSecs(59);\n  //         setMins(mins - 1);\n  //       }, 1000);\n  //     } else {\n  //         // setMins(\"0\");\n  //         // setSecs(\"0\");\n  //         Alert.alert(\"Done!\");\n  //         setTimerRunning(false);\n\n  //         // Vibration.vibrate([500, 500, 500])\n  //     }\n  //   }\n  // }\n\n  // useEffect(() => {\n  //   startCountDown();\n  //   return () => clearTimeout(secsTimer);\n  // })\n\n\n\n\n\n\n  // OG bell sound. pause works, but play doesn't start the bell again. - this way interrupts the touch screen overlay thing tho.\n\n  // const bellSound = new Audio.Sound();\n  // Audio.setAudioModeAsync({playsInSilentModeIOS: true});\n  \n  // // Bell Interval\n  // const bellInterval = useRef(null);\n\n  // const clear = useCallback(() => clearInterval(bellInterval.current), []);\n  // const playBell = async () => await bellSound.replayAsync();\n\n  // const playBowlSound = async () => {\n  //   try {\n  //     await bellSound.loadAsync(require('../../../assets/audio/singing-bowl.mp3'));\n  //     await bellSound.playAsync()\n  //     // Your sound is playing!\n\n  //   } catch (error) {\n  //     console.log(error);\n  //   }\n  //   // // https://docs.expo.io/versions/latest/sdk/audio/?redirected#parameters\n\n  //   if (timerRunning) {\n  //     bellInterval.current = setInterval(playBell, 5000);\n  //   }\n  // }\n\n  // useEffect(() => {\n  //   // MOUNT\n  //   playBowlSound();\n  //   console.log(\"useEffect playbowlsound mounted/started!\")\n\n  //   // UNMOUNT\n  //   return () => clearInterval(bellInterval.current)\n  // }, [])\n\n\n  // useEffect(() => {\n  //   if (!timerRunning) console.log(\"timer done or paused, no more bell sound!\");\n  //   if (!timerRunning) clear();\n  //   console.log(timerRunning);\n    \n  //   // Don't forget to unload the sound from memory\n  //   // when you are done using the Sound object\n  //   return () => bellSound.unloadAsync();\n  // })\n\n\n\n\n\n\n\n  const { minutes, bellInterv } = route.params;\n  const [ timerRunning, setTimerRunning ] = useState(true);\n\n  const [ mins, setMins ] = useState(minutes);\n  const [ secs, setSecs ] = useState(0);\n\n  // // SHORT 2 SEC TEST\n  // const [ mins, setMins ] = useState(0);\n  // const [ secs, setSecs ] = useState(2);\n\n  // Add leading zero to numbers 9 or below (purely for aesthetics):\n  function leadingZero(time) {\n      if (time <= 9) {\n          time = \"0\" + time;\n      }\n      return time;\n  }\n\n\n  // useInterval() ATTEMPT - ghetto, but works for the most part. once it hits 00:00, it still hits the else, and still runs every second. BUT DESTRUCTURING THE CLEAR() METHOD FROM USEINTERVAL FUNCTION AND CALLING THAT WORKS!\n  // COUNTDOWN - useInterval()\n  const countDown = () => {\n    if (secs > 0) {\n      setSecs(secs - 1);\n    } else if (mins >= 1 && secs == 0) {\n      setSecs(59);\n      setMins(mins - 1);\n    } else {\n      updateUserTime();\n      incrementSessionsCompleted();\n      Alert.alert(\"Timer Complete\", \"Great job, youâ€™ve completed your meditation session!\", [\n        {text: \"Back\", onPress: () => navigation.goBack()}, \n        {text: \"Finish\", style: \"cancel\", onPress: () => navigation.navigate(\"Profile\")}\n      ]);\n      setTimerRunning(false);\n      bellSound.unloadAsync();\n      // console.log('else');\n      loadFinishedSound(); // final 3 bells because of the 2 sec setTimeout below.\n      clear();\n      setTimeout(() => {\n        finishedSound.unloadAsync(); // cuts off the sound\n        bellSound.unloadAsync(); // \n        // navigation.navigate(\"MeditateTimerSetScreen\");\n      }, 6000);\n    }\n    console.log(sessionSecs);\n    setSessionSecs(sessionSecs => sessionSecs += 1);\n  }\n\n\n\n  // BELL SOUND - useInterval()  \n  const bellSound = new Audio.Sound();\n  Audio.setAudioModeAsync({playsInSilentModeIOS: true, staysActiveInBackground: true});\n\n  const playBell = async () => await bellSound.replayAsync();\n  const playBellFirst = async () => await bellSound.playAsync();\n\n  const loadSound = async () => {\n    try {\n      await bellSound.loadAsync(require('../../../assets/audio/singing-bowl.mp3'));\n      bellInterv === null ? null : await bellSound.playAsync()\n      console.log(\"load sound!\")\n    } catch (error) {\n      console.log(error);\n    }\n    // // https://docs.expo.io/versions/latest/sdk/audio/?redirected#parameters\n  }\n\n\n  // FINISHED BELL SOUND\n  const finishedSound = new Audio.Sound();\n  Audio.setAudioModeAsync({playsInSilentModeIOS: true, staysActiveInBackground: true});\n\n  const loadFinishedSound = async () => {\n    try {\n      await finishedSound.loadAsync(require('../../../assets/audio/meditation-finished-sound.mp3'));\n      await finishedSound.playAsync()\n      console.log(\"finished bell loaded!\")\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n\n\n  useEffect(() => {\n    // MOUNT\n    loadSound();\n    // playBellFirst();\n    console.log(\"useEffect loadSound mounted/started!\");\n    console.log(bellInterv);\n\n    // UNMOUNT\n    return () => bellSound.unloadAsync();\n  }, [])\n\n  useEffect(() => {\n    // UNMOUNT FINAL BELL\n    return () => finishedSound.unloadAsync();\n  }, [])\n\n  const [toggleClock, runningClock, clear] = useInterval(() => {\n    countDown();\n  }, 1000);\n\n  const [toggleBell, runningBell] = useInterval(() => {\n    timerRunning ? loadSound() : null;\n  }, bellInterv);\n\n  const toggle = () => {\n    toggleClock();\n    bellInterv === null ? null : toggleBell();\n    setTimerRunning(!timerRunning);\n  }\n\n\n\n\n\n\n\n  const currUser = firebase.auth().currentUser;\n  const progressRef = currUser ? firebase.database().ref(currUser.uid).child('progress') : null;\n\n\n  const [sessionSecs, setSessionSecs] = useState(0);\n\n  // WITH SAFETY CHECK ADDED - for users with no existing progress data objects\n  // INSTEAD OF DB POST REQUESTING EVERY SECOND with incrementUserTime(), THIS INCREMENTS LOCALLY, THEN WHEN USER FINISHES EXERCISE WITH ALERT POPUP ORRR UNMOUNTS EXERCISE, THEN UPDATE THE PRACTICE TIME BY ADDING THE SO FAR WITH THIS LOCALLY INCREMENTED SECONDS TRACKER.\n  async function updateUserTime() {\n    if (currUser) {\n      let timeSoFar;\n      await progressRef.once('value', async snapshot => {\n        if (snapshot.val() === null) {\n          progressRef.set({\n            practiceTime: 0,\n            sessionsCompleted: 0,\n            currentStreak: 0,\n            bestStreak: 0\n          })\n          timeSoFar = await snapshot.val() !== null ? snapshot.val().practiceTime : 0;\n        } else {\n          timeSoFar = await snapshot.val() !== null ? snapshot.val().practiceTime : 0;\n        }\n\n        await progressRef.update({\n          practiceTime: timeSoFar += sessionSecs\n        })\n      })\n      setSessionSecs(0);\n    } \n  };\n\n\n  // WITH SAFETY CHECK ADDED - for users with no existing progress data objects\n  // Increment sessions user completed - triggers when that 'finish' popup modal comes out\n  async function incrementSessionsCompleted() {\n    if (currUser) {\n      let sessionsCompletedSoFar;\n      await progressRef.once('value', async snapshot => {\n        if (snapshot.val() === null) {\n          progressRef.set({\n            practiceTime: 0,\n            sessionsCompleted: 0,\n            currentStreak: 0,\n            bestStreak: 0\n          })\n          sessionsCompletedSoFar = await snapshot.val() !== null ? snapshot.val().sessionsCompleted : 0;\n        } else {\n          sessionsCompletedSoFar = await snapshot.val() !== null ? snapshot.val().sessionsCompleted : 0;\n        }\n\n        await progressRef.update({\n          sessionsCompleted: sessionsCompletedSoFar += 1\n        })\n      });\n    } \n  };\n\n\n  const goBack = () => {\n    updateUserTime();\n    navigation.goBack();\n  }\n\n\n\n\n\n\n\n\n  return (\n    <ImageBackground source={bgImage} style={{ flex: 1, resizeMode: \"cover\", position: \"relative\", zIndex: -10}}>\n      {isFocused ? <StatusBar hidden={false} barStyle=\"light-content\"/> : null} \n\n      <Animated.View style={{ width: width, flexDirection: \"row\", alignItems: \"center\", marginTop: height * 0.07, position: \"absolute\", zIndex: 100, opacity: overlayFade}}>\n        <TouchableOpacity onPress={goBack} style={{ padding: 15}}>\n          <Image source={require('../../../assets/screen-icons/back-arrow-white.png')} style={{height: 20, marginLeft: 0}} resizeMode=\"contain\"/>\n        </TouchableOpacity>\n        <Text style={{textAlign: \"center\", fontSize: 23, fontFamily: \"Assistant-SemiBold\", color: 'white', position: \"absolute\", zIndex: -1, width: width}}>Meditate</Text>\n      </Animated.View>\n      \n\n      <View style={{ justifyContent: \"center\", position: \"absolute\", height: height, width: width}}>\n        <View style={{ padding: 20, alignItems: \"center\" }}>\n        <Text style={{fontFamily: \"Assistant\", color: \"white\", fontSize: 67}}>{`${leadingZero(mins)}:${leadingZero(secs)}`}</Text>\n        {/* <Text style={{fontFamily: \"Assistant\", color: \"white\", fontSize: 67}}>{`${leadingZero(mins)}:${leadingZero(secs)}`}</Text> */}\n        {/* <Text style={{fontFamily: \"Assistant\", color: \"white\", fontSize: 67}}>{`${leadingZero(clock.mins)}:${leadingZero(clock.secs)}`}</Text> */}\n          \n          {/* <TouchableOpacity onPress={() => pause()}> */}\n          <TouchableOpacity onPress={() => toggle()} >\n            {timerRunning ? \n            <Image source={require('../../../assets/screen-icons/pause-circle.png')} style={{height: 66, width: 66}} resizeMode=\"contain\"/>\n            :\n            <Image source={require('../../../assets/screen-icons/play-circle.png')} style={{height: 66, width: 66}} resizeMode=\"contain\"/>\n            }\n          </TouchableOpacity>\n\n\n        </View>\n\n\n      </View>\n\n        <TouchableWithoutFeedback onPress={touchScreenToggleControls}>\n          <View style={{ height: height * 0.51, width: width, position: \"absolute\", }}>\n            {/* <Text style={{color: \"lightgreen\", fontSize: 30}}>TOUCH!</Text> */}\n          </View>\n        </TouchableWithoutFeedback>\n\n        <TouchableWithoutFeedback onPress={touchScreenToggleControls}>\n          <View style={{ height: height * 0.39, width: width, position: \"absolute\", bottom: 0 }}>\n            {/* <Text style={{color: \"lightgreen\", fontSize: 30}}>TOUCH!</Text> */}\n          </View>\n        </TouchableWithoutFeedback>\n\n    </ImageBackground>\n  )\n}\n\nconst styles = StyleSheet.create({\n  blueButton: {\n    backgroundColor: \"#3681C7\",\n    height: 51,\n    width: 234,\n    borderRadius: 17,\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    shadowRadius: 7,\n    shadowColor: \"black\",\n    shadowOpacity: 0.2,\n    shadowOffset: {width: 3, height: 3}\n  },\n  buttonText: {\n    color: \"#fff\",\n    flex: 1,\n    textAlign: \"center\",\n    fontSize: 22,\n    letterSpacing: 1,\n    fontFamily: \"Assistant-SemiBold\"\n  }\n})\n\n\n\n\n\n\n// the callback was countDown() or loadSound()\n// toggle() is called whenever the pause and play button is pressed\n// useRef.current() to store a value that persists between renders. \n\n\n// useINTERVAL ATTEMPT\nfunction useInterval(callback, delay) {\n  const savedCallback = useRef();\n  const intervalId = useRef(null);\n  const [currentDelay, setDelay] = useState(delay);\n\n  const toggleRunning = useCallback(\n    () => setDelay(currentDelay => (currentDelay === null ? delay : null)),\n    [delay]\n  );\n\n  const clear = useCallback(() => clearInterval(intervalId.current), []);\n\n  // Remember the latest function. Store it in the useRef().current\n  useEffect(() => {\n    savedCallback.current = callback;\n  }, [callback]);\n\n  // Set up the interval.\n  useEffect(() => {\n    function tick() {\n      savedCallback.current();\n    }\n\n    if (intervalId.current) clear();\n\n    if (currentDelay !== null) {\n      intervalId.current = setInterval(tick, currentDelay);\n    }\n\n    return clear;\n  }, [currentDelay, clear]);\n\n  return [toggleRunning, !!currentDelay, clear];\n}"]},"metadata":{},"sourceType":"module"}