{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"/Users/stanleyjeong/Desktop/_CODING/_PROJECTS 25 projects/z_SJ_Portfolio 2020/MEMOIR/Memoir/node_modules/react-native-double-tap/index.js\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component } from \"react\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\n\nvar DoubleClick = function (_Component) {\n  _inherits(DoubleClick, _Component);\n\n  var _super = _createSuper(DoubleClick);\n\n  function DoubleClick(props) {\n    var _this;\n\n    _classCallCheck(this, DoubleClick);\n\n    _this = _super.call(this, props);\n\n    _this._onPress = function () {\n      var now = new Date().getTime();\n\n      if (_this.firstPress) {\n        _this.firstPress = false;\n        _this.timer = setTimeout(function () {\n          _this.props.singleTap ? _this.props.singleTap() : null;\n          _this.firstPress = true;\n        }, _this.delayTime);\n        _this.lastTime = now;\n      } else {\n        if (now - _this.lastTime < _this.delayTime) {\n          _this.timer && clearTimeout(_this.timer);\n          _this.props.doubleTap ? _this.props.doubleTap() : null;\n          _this.firstPress = true;\n        }\n      }\n    };\n\n    _this.delayTime = props.delay ? props.delay : 200;\n    _this.firstPress = true;\n    _this.lastTime = new Date();\n    _this.timer = false;\n    return _this;\n  }\n\n  _createClass(DoubleClick, [{\n    key: \"render\",\n    value: function render() {\n      return React.createElement(TouchableOpacity, {\n        onPress: this._onPress,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 7\n        }\n      }, this.props.children);\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      this.timer && clearTimeout(this.timer);\n    }\n  }]);\n\n  return DoubleClick;\n}(Component);\n\nexport { DoubleClick as default };","map":{"version":3,"sources":["/Users/stanleyjeong/Desktop/_CODING/_PROJECTS 25 projects/z_SJ_Portfolio 2020/MEMOIR/Memoir/node_modules/react-native-double-tap/index.js"],"names":["React","Component","DoubleClick","props","_onPress","now","Date","getTime","firstPress","timer","setTimeout","singleTap","delayTime","lastTime","clearTimeout","doubleTap","delay","children"],"mappings":";;;;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;;;IAGqBC,W;;;;;AACnB,uBAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AACjB,8BAAMA,KAAN;;AADiB,UAanBC,QAbmB,GAaR,YAAM;AAEf,UAAIC,GAAG,GAAG,IAAIC,IAAJ,GAAWC,OAAX,EAAV;;AAEA,UAAI,MAAKC,UAAT,EAAqB;AAEnB,cAAKA,UAAL,GAAkB,KAAlB;AAGA,cAAKC,KAAL,GAAaC,UAAU,CAAC,YAAM;AAE5B,gBAAKP,KAAL,CAAWQ,SAAX,GAAuB,MAAKR,KAAL,CAAWQ,SAAX,EAAvB,GAAgD,IAAhD;AAGA,gBAAKH,UAAL,GAAkB,IAAlB;AACD,SANsB,EAMpB,MAAKI,SANe,CAAvB;AASA,cAAKC,QAAL,GAAgBR,GAAhB;AACD,OAfD,MAeO;AAEL,YAAIA,GAAG,GAAG,MAAKQ,QAAX,GAAsB,MAAKD,SAA/B,EAA0C;AAExC,gBAAKH,KAAL,IAAcK,YAAY,CAAC,MAAKL,KAAN,CAA1B;AAGA,gBAAKN,KAAL,CAAWY,SAAX,GAAuB,MAAKZ,KAAL,CAAWY,SAAX,EAAvB,GAAgD,IAAhD;AAGA,gBAAKP,UAAL,GAAkB,IAAlB;AACD;AACF;AACF,KA7CkB;;AAIjB,UAAKI,SAAL,GAAiBT,KAAK,CAACa,KAAN,GAAcb,KAAK,CAACa,KAApB,GAA4B,GAA7C;AAEA,UAAKR,UAAL,GAAkB,IAAlB;AAEA,UAAKK,QAAL,GAAgB,IAAIP,IAAJ,EAAhB;AAEA,UAAKG,KAAL,GAAa,KAAb;AAViB;AAWlB;;;;6BAoCQ;AACP,aACE,oBAAC,gBAAD;AAAkB,QAAA,OAAO,EAAE,KAAKL,QAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACG,KAAKD,KAAL,CAAWc,QADd,CADF;AAKD;;;2CAEsB;AAErB,WAAKR,KAAL,IAAcK,YAAY,CAAC,KAAKL,KAAN,CAA1B;AACD;;;;EA3DsCR,S;;SAApBC,W","sourcesContent":["import React, { Component } from \"react\";\nimport { TouchableOpacity } from \"react-native\";\n\nexport default class DoubleClick extends Component {\n  constructor(props) {\n    super(props);\n\n    // time interval between double clicks\n    this.delayTime = props.delay ? props.delay : 200;\n    // bool to check whether user tapped once\n    this.firstPress = true;\n    // the last time user tapped\n    this.lastTime = new Date();\n    // a timer is used to run the single tap event\n    this.timer = false;\n  }\n\n  _onPress = () => {\n    // get the instance of time when pressed\n    let now = new Date().getTime();\n\n    if (this.firstPress) {\n      // if pressed first can be a first press again\n      this.firstPress = false;\n\n      //set the timeout\n      this.timer = setTimeout(() => {\n        //check if user passed in prop\n        this.props.singleTap ? this.props.singleTap() : null;\n\n        // reset back to initial state\n        this.firstPress = true;\n      }, this.delayTime);\n\n      // mark the last time of the press\n      this.lastTime = now;\n    } else {\n      //if user pressed immediately again within span of delayTime\n      if (now - this.lastTime < this.delayTime) {\n        // clear the timeout for the single press\n        this.timer && clearTimeout(this.timer);\n\n        //check if user passed in prop for double click\n        this.props.doubleTap ? this.props.doubleTap() : null;\n\n        // reset back to initial state\n        this.firstPress = true;\n      }\n    }\n  };\n\n  render() {\n    return (\n      <TouchableOpacity onPress={this._onPress}>\n        {this.props.children}\n      </TouchableOpacity>\n    );\n  }\n\n  componentWillUnmount() {\n    // make sure to clear the timer when unmounting\n    this.timer && clearTimeout(this.timer);\n  }\n}\n"]},"metadata":{},"sourceType":"module"}