{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"/Users/stanleyjeong/Desktop/_CODING/_PROJECTS 25 projects/z_SJ_Portfolio 2020/MEMOIR/Memoir/navigation/tab-screens/meditate-screens-more/MeditateTimerSetScreen.jsx\";\nimport React, { useContext, useState } from 'react';\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport StatusBar from \"react-native-web/dist/exports/StatusBar\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport ImageBackground from \"react-native-web/dist/exports/ImageBackground\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport AppButton from \"../../../components/AppButton\";\nimport { useIsFocused } from '@react-navigation/native';\nimport { useFonts } from 'expo-font';\nimport { AuthContext } from \"../../../components/context\";\nimport * as Haptics from 'expo-haptics';\n\nvar bgImage = require(\"../../../assets/splash/memoir-splash-thin-4x.png\");\n\nvar _Dimensions$get = Dimensions.get('window'),\n    width = _Dimensions$get.width,\n    height = _Dimensions$get.height;\n\nimport DateTimePicker from '@react-native-community/datetimepicker';\nimport { Picker } from '@react-native-picker/picker';\nimport { LinearGradient } from 'expo-linear-gradient';\nimport firebase from 'firebase';\nexport default function MeditateTimerSetScreen(_ref) {\n  var _this = this;\n\n  var navigation = _ref.navigation,\n      route = _ref.route;\n\n  var _useState = useState(10),\n      _useState2 = _slicedToArray(_useState, 2),\n      minutes = _useState2[0],\n      setMinutes = _useState2[1];\n\n  var _useState3 = useState(\"30 Seconds\"),\n      _useState4 = _slicedToArray(_useState3, 2),\n      bellIntervDisplay = _useState4[0],\n      setBellIntervDisplay = _useState4[1];\n\n  var _useState5 = useState(30000),\n      _useState6 = _slicedToArray(_useState5, 2),\n      bellInterv = _useState6[0],\n      setBellInterv = _useState6[1];\n\n  var _useContext = useContext(AuthContext),\n      userToken = _useContext.userToken;\n\n  var renderMinsPickerItems = function renderMinsPickerItems() {\n    var items = [];\n\n    for (var i = 1; i <= 60; i++) {\n      items.push(React.createElement(Image, {\n        key: i,\n        source: require(\"../../../assets/meditate-timer-set/bar-1.png\"),\n        resizeMode: \"contain\",\n        style: {\n          margin: 3,\n          height: 18\n        },\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 18\n        }\n      }));\n    }\n\n    return items;\n  };\n\n  var renderSecsPickerItems = function renderSecsPickerItems() {\n    var items = [];\n\n    for (var i = 30; i <= 90; i += 30) {\n      items.push(React.createElement(Text, {\n        key: i,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 18\n        }\n      }, \" | \"));\n    }\n\n    return items;\n  };\n\n  var onChange = function onChange(value) {\n    return _regeneratorRuntime.async(function onChange$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            if (!(value > 0 && value <= 60)) {\n              _context.next = 5;\n              break;\n            }\n\n            setMinutes(value);\n\n            if (!(value !== minutes)) {\n              _context.next = 5;\n              break;\n            }\n\n            _context.next = 5;\n            return _regeneratorRuntime.awrap(Haptics.selectionAsync());\n\n          case 5:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  var onChangeSecs = function onChangeSecs(value) {\n    var bellOptions, bellArray;\n    return _regeneratorRuntime.async(function onChangeSecs$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            bellOptions = {\n              \"30 Seconds\": 30000,\n              \"60 Seconds\": 60000,\n              \"90 Seconds\": 90000,\n              \"2 Minutes\": 120000,\n              \"3 Minutes\": 180000,\n              \"5 Minutes\": 300000,\n              \"OFF\": null\n            };\n            bellArray = Object.keys(bellOptions);\n\n            if (!(value >= 0 && value < 7)) {\n              _context2.next = 8;\n              break;\n            }\n\n            setBellIntervDisplay(bellArray[value]);\n            setBellInterv(bellOptions[bellArray[value]]);\n\n            if (!(bellArray[value] !== bellIntervDisplay)) {\n              _context2.next = 8;\n              break;\n            }\n\n            _context2.next = 8;\n            return _regeneratorRuntime.awrap(Haptics.selectionAsync());\n\n          case 8:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  var isFocused = useIsFocused();\n\n  var _useFonts = useFonts({\n    'Assistant': require(\"../../../assets/fonts/Assistant/Assistant-VariableFont_wght.ttf\"),\n    'Assistant-Regular': require(\"../../../assets/fonts/Assistant/static/Assistant-Regular.ttf\"),\n    'Assistant-SemiBold': require(\"../../../assets/fonts/Assistant/static/Assistant-SemiBold.ttf\")\n  }),\n      _useFonts2 = _slicedToArray(_useFonts, 1),\n      fontsLoaded = _useFonts2[0];\n\n  var currUser = firebase.auth().currentUser;\n  var progressRef = currUser ? firebase.database().ref(currUser.uid).child('progress') : null;\n\n  var incrementStreak = function incrementStreak() {\n    var currentStreakSoFar, lastDateExercised, bestStreakSoFar;\n    return _regeneratorRuntime.async(function incrementStreak$(_context4) {\n      while (1) {\n        switch (_context4.prev = _context4.next) {\n          case 0:\n            if (!currUser) {\n              _context4.next = 3;\n              break;\n            }\n\n            _context4.next = 3;\n            return _regeneratorRuntime.awrap(progressRef.once('value', function _callee(snapshot) {\n              var dateNow;\n              return _regeneratorRuntime.async(function _callee$(_context3) {\n                while (1) {\n                  switch (_context3.prev = _context3.next) {\n                    case 0:\n                      _context3.next = 2;\n                      return _regeneratorRuntime.awrap(snapshot.val());\n\n                    case 2:\n                      _context3.t0 = _context3.sent;\n\n                      if (!(_context3.t0 === null)) {\n                        _context3.next = 34;\n                        break;\n                      }\n\n                      progressRef.set({\n                        practiceTime: 0,\n                        sessionsCompleted: 0,\n                        currentStreak: 1,\n                        bestStreak: 1,\n                        lastDateExercised: new Date().getDate(),\n                        bestStreakDate: new Date().getDate(),\n                        bestStreakMonth: new Date().getMonth() + 1,\n                        bestStreakYear: new Date().getFullYear()\n                      });\n                      _context3.next = 7;\n                      return _regeneratorRuntime.awrap(snapshot.val());\n\n                    case 7:\n                      _context3.t1 = _context3.sent;\n\n                      if (!(_context3.t1 !== null)) {\n                        _context3.next = 12;\n                        break;\n                      }\n\n                      _context3.t2 = snapshot.val().currentStreak;\n                      _context3.next = 13;\n                      break;\n\n                    case 12:\n                      _context3.t2 = 0;\n\n                    case 13:\n                      currentStreakSoFar = _context3.t2;\n                      _context3.next = 16;\n                      return _regeneratorRuntime.awrap(snapshot.val());\n\n                    case 16:\n                      _context3.t3 = _context3.sent;\n\n                      if (!(_context3.t3 !== null)) {\n                        _context3.next = 21;\n                        break;\n                      }\n\n                      _context3.t4 = snapshot.val().lastDateExercised;\n                      _context3.next = 22;\n                      break;\n\n                    case 21:\n                      _context3.t4 = new Date().getDate();\n\n                    case 22:\n                      lastDateExercised = _context3.t4;\n                      _context3.next = 25;\n                      return _regeneratorRuntime.awrap(snapshot.val());\n\n                    case 25:\n                      _context3.t5 = _context3.sent;\n\n                      if (!(_context3.t5 !== null)) {\n                        _context3.next = 30;\n                        break;\n                      }\n\n                      _context3.t6 = snapshot.val().bestStreak;\n                      _context3.next = 31;\n                      break;\n\n                    case 30:\n                      _context3.t6 = 1;\n\n                    case 31:\n                      bestStreakSoFar = _context3.t6;\n                      _context3.next = 61;\n                      break;\n\n                    case 34:\n                      _context3.next = 36;\n                      return _regeneratorRuntime.awrap(snapshot.val());\n\n                    case 36:\n                      _context3.t7 = _context3.sent;\n\n                      if (!(_context3.t7 !== null)) {\n                        _context3.next = 41;\n                        break;\n                      }\n\n                      _context3.t8 = snapshot.val().currentStreak;\n                      _context3.next = 42;\n                      break;\n\n                    case 41:\n                      _context3.t8 = 0;\n\n                    case 42:\n                      currentStreakSoFar = _context3.t8;\n                      _context3.next = 45;\n                      return _regeneratorRuntime.awrap(snapshot.val());\n\n                    case 45:\n                      _context3.t9 = _context3.sent;\n\n                      if (!(_context3.t9 !== null)) {\n                        _context3.next = 50;\n                        break;\n                      }\n\n                      _context3.t10 = snapshot.val().lastDateExercised;\n                      _context3.next = 51;\n                      break;\n\n                    case 50:\n                      _context3.t10 = new Date().getDate();\n\n                    case 51:\n                      lastDateExercised = _context3.t10;\n                      _context3.next = 54;\n                      return _regeneratorRuntime.awrap(snapshot.val());\n\n                    case 54:\n                      _context3.t11 = _context3.sent;\n\n                      if (!(_context3.t11 !== null)) {\n                        _context3.next = 59;\n                        break;\n                      }\n\n                      _context3.t12 = snapshot.val().bestStreak;\n                      _context3.next = 60;\n                      break;\n\n                    case 59:\n                      _context3.t12 = 1;\n\n                    case 60:\n                      bestStreakSoFar = _context3.t12;\n\n                    case 61:\n                      dateNow = new Date().getDate();\n\n                      if (!(dateNow - lastDateExercised > 1 || currentStreakSoFar == 0)) {\n                        _context3.next = 67;\n                        break;\n                      }\n\n                      _context3.next = 65;\n                      return _regeneratorRuntime.awrap(progressRef.update({\n                        currentStreak: 1,\n                        bestStreak: Math.max(bestStreakSoFar, currentStreakSoFar),\n                        lastDateExercised: dateNow\n                      }));\n\n                    case 65:\n                      _context3.next = 70;\n                      break;\n\n                    case 67:\n                      if (!(dateNow - lastDateExercised === 1 || dateNow - lastDateExercised <= -26)) {\n                        _context3.next = 70;\n                        break;\n                      }\n\n                      _context3.next = 70;\n                      return _regeneratorRuntime.awrap(progressRef.update({\n                        currentStreak: currentStreakSoFar += 1,\n                        bestStreak: Math.max(bestStreakSoFar, currentStreakSoFar),\n                        lastDateExercised: dateNow\n                      }));\n\n                    case 70:\n                      if (!(bestStreakSoFar < currentStreakSoFar)) {\n                        _context3.next = 73;\n                        break;\n                      }\n\n                      _context3.next = 73;\n                      return _regeneratorRuntime.awrap(progressRef.update({\n                        lastDateExercised: dateNow,\n                        bestStreak: Math.max(bestStreakSoFar, currentStreakSoFar),\n                        bestStreakDate: new Date().getDate(),\n                        bestStreakMonth: new Date().getMonth() + 1,\n                        bestStreakYear: new Date().getFullYear()\n                      }));\n\n                    case 73:\n                    case \"end\":\n                      return _context3.stop();\n                  }\n                }\n              }, null, null, null, Promise);\n            }));\n\n          case 3:\n          case \"end\":\n            return _context4.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  var startMeditation = function startMeditation() {\n    incrementStreak();\n    setTimeout(function () {\n      navigation.navigate('MeditateExerciseScreen', {\n        minutes: minutes,\n        bellInterv: bellInterv,\n        bgImage: bgImage\n      });\n    }, 0);\n  };\n\n  return React.createElement(ImageBackground, {\n    source: bgImage,\n    style: {\n      flex: 1,\n      resizeMode: \"cover\",\n      justifyContent: \"center\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 184,\n      columnNumber: 5\n    }\n  }, isFocused ? React.createElement(StatusBar, {\n    hidden: false,\n    barStyle: \"light-content\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 185,\n      columnNumber: 20\n    }\n  }) : null, React.createElement(TouchableOpacity, {\n    onPress: function onPress() {\n      return navigation.goBack();\n    },\n    style: {\n      position: \"absolute\",\n      top: height * 0.065,\n      zIndex: 100,\n      padding: 15\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 186,\n      columnNumber: 7\n    }\n  }, React.createElement(Image, {\n    source: require(\"../../../assets/screen-icons/back-arrow-white.png\"),\n    style: {\n      height: 20\n    },\n    resizeMode: \"contain\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 187,\n      columnNumber: 9\n    }\n  })), React.createElement(View, {\n    style: {\n      marginTop: 20\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 189,\n      columnNumber: 7\n    }\n  }, React.createElement(Text, {\n    style: {\n      textAlign: \"center\",\n      fontSize: 23,\n      fontFamily: \"Assistant-SemiBold\",\n      color: 'white'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 190,\n      columnNumber: 9\n    }\n  }, \"Meditate\"), React.createElement(View, {\n    style: {\n      flexDirection: \"row\",\n      padding: 20\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 191,\n      columnNumber: 9\n    }\n  }, React.createElement(View, {\n    style: {\n      backgroundColor: \"white\",\n      flex: 1,\n      height: height * 0.7,\n      borderRadius: 20,\n      justifyContent: \"space-evenly\",\n      alignItems: \"center\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 192,\n      columnNumber: 11\n    }\n  }, React.createElement(View, {\n    style: {\n      width: width * 0.63,\n      height: height * 0.45,\n      justifyContent: \"space-around\",\n      alignItems: \"center\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 194,\n      columnNumber: 13\n    }\n  }, React.createElement(View, {\n    style: {\n      alignItems: \"center\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 195,\n      columnNumber: 15\n    }\n  }, React.createElement(Image, {\n    source: require(\"../../../assets/screen-icons/clock.png\"),\n    style: {\n      height: height < 600 ? 30 : 37\n    },\n    resizeMode: \"contain\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 196,\n      columnNumber: 17\n    }\n  }), React.createElement(Text, {\n    style: {\n      fontFamily: \"Assistant-SemiBold\",\n      fontSize: height < 600 ? 18 : 20,\n      textAlign: \"center\",\n      color: \"#535353\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 197,\n      columnNumber: 17\n    }\n  }, \"Session Duration:\"), React.createElement(Text, {\n    style: {\n      fontFamily: \"Assistant-SemiBold\",\n      fontSize: height < 600 ? 20 : 25,\n      textAlign: \"center\",\n      color: \"#535353\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 198,\n      columnNumber: 17\n    }\n  }, minutes, \" \", minutes === 1 ? \"Minute\" : \"Minutes\"), React.createElement(ScrollView, {\n    horizontal: true,\n    showsHorizontalScrollIndicator: false,\n    onScroll: function onScroll(e) {\n      return onChange(Math.floor(1 + e.nativeEvent.contentOffset.x / (e.nativeEvent.contentSize.width - e.nativeEvent.layoutMeasurement.width) * 59));\n    },\n    scrollEventThrottle: 16,\n    contentOffset: {\n      x: 100,\n      y: 0\n    },\n    style: {\n      width: 200,\n      maxHeight: 50\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 223,\n      columnNumber: 17\n    }\n  }, React.createElement(View, {\n    style: {\n      flexDirection: \"row\",\n      alignItems: \"center\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 233,\n      columnNumber: 19\n    }\n  }, renderMinsPickerItems()))), React.createElement(View, {\n    style: {\n      alignItems: \"center\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 240,\n      columnNumber: 15\n    }\n  }, React.createElement(Image, {\n    source: require(\"../../../assets/screen-icons/bell.png\"),\n    style: {\n      height: height < 600 ? 26 : 32\n    },\n    resizeMode: \"contain\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 241,\n      columnNumber: 17\n    }\n  }), React.createElement(Text, {\n    style: {\n      fontFamily: \"Assistant-SemiBold\",\n      fontSize: height < 600 ? 18 : 20,\n      textAlign: \"center\",\n      color: \"#535353\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 242,\n      columnNumber: 17\n    }\n  }, \"Bell Sound Every:\"), React.createElement(Text, {\n    style: {\n      fontFamily: \"Assistant-SemiBold\",\n      fontSize: height < 600 ? 20 : 25,\n      textAlign: \"center\",\n      color: \"#535353\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 243,\n      columnNumber: 17\n    }\n  }, bellIntervDisplay), React.createElement(ScrollView, {\n    horizontal: true,\n    showsHorizontalScrollIndicator: false,\n    onScroll: function onScroll(e) {\n      return onChangeSecs(Math.floor(e.nativeEvent.contentOffset.x / (e.nativeEvent.contentSize.width - e.nativeEvent.layoutMeasurement.width) * 7));\n    },\n    scrollEventThrottle: 16,\n    style: {\n      width: 200,\n      maxHeight: 50\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 246,\n      columnNumber: 17\n    }\n  }, React.createElement(View, {\n    style: {\n      flexDirection: \"row\",\n      alignItems: \"center\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 254,\n      columnNumber: 19\n    }\n  }, renderMinsPickerItems())))), React.createElement(AppButton, {\n    title: \"Start\",\n    buttonStyles: styles.blueButton,\n    buttonTextStyles: styles.buttonText,\n    onPress: startMeditation,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 275,\n      columnNumber: 13\n    }\n  })))));\n}\nvar styles = StyleSheet.create({\n  blueButton: {\n    backgroundColor: \"#3681C7\",\n    height: 51,\n    width: 234,\n    borderRadius: 17,\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    shadowRadius: 7,\n    shadowColor: \"black\",\n    shadowOpacity: 0.2,\n    shadowOffset: {\n      width: 3,\n      height: 3\n    }\n  },\n  buttonText: {\n    color: \"#fff\",\n    flex: 1,\n    textAlign: \"center\",\n    fontSize: 22,\n    letterSpacing: 1,\n    fontFamily: \"Assistant-SemiBold\"\n  }\n});","map":{"version":3,"sources":["/Users/stanleyjeong/Desktop/_CODING/_PROJECTS 25 projects/z_SJ_Portfolio 2020/MEMOIR/Memoir/navigation/tab-screens/meditate-screens-more/MeditateTimerSetScreen.jsx"],"names":["React","useContext","useState","AppButton","useIsFocused","useFonts","AuthContext","Haptics","bgImage","require","Dimensions","get","width","height","DateTimePicker","Picker","LinearGradient","firebase","MeditateTimerSetScreen","navigation","route","minutes","setMinutes","bellIntervDisplay","setBellIntervDisplay","bellInterv","setBellInterv","userToken","renderMinsPickerItems","items","i","push","margin","renderSecsPickerItems","onChange","value","selectionAsync","onChangeSecs","bellOptions","bellArray","Object","keys","isFocused","fontsLoaded","currUser","auth","currentUser","progressRef","database","ref","uid","child","incrementStreak","once","snapshot","val","set","practiceTime","sessionsCompleted","currentStreak","bestStreak","lastDateExercised","Date","getDate","bestStreakDate","bestStreakMonth","getMonth","bestStreakYear","getFullYear","currentStreakSoFar","bestStreakSoFar","dateNow","update","Math","max","startMeditation","setTimeout","navigate","flex","resizeMode","justifyContent","goBack","position","top","zIndex","padding","marginTop","textAlign","fontSize","fontFamily","color","flexDirection","backgroundColor","borderRadius","alignItems","e","floor","nativeEvent","contentOffset","x","contentSize","layoutMeasurement","y","maxHeight","styles","blueButton","buttonText","StyleSheet","create","shadowRadius","shadowColor","shadowOpacity","shadowOffset","letterSpacing"],"mappings":"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","sourcesContent":["import React, { useContext, useState } from 'react';\nimport { Text, View, StatusBar, ScrollView, Image, Dimensions, StyleSheet, ImageBackground, TouchableOpacity } from 'react-native';\nimport AppButton from '../../../components/AppButton';\nimport { useIsFocused } from '@react-navigation/native';\nimport { useFonts } from 'expo-font';\nimport { AuthContext } from '../../../components/context';\nimport * as Haptics from 'expo-haptics';\n\nconst bgImage = require('../../../assets/splash/memoir-splash-thin-4x.png');\nconst { width, height } = Dimensions.get('window');\n\nimport DateTimePicker from '@react-native-community/datetimepicker';\nimport { Picker } from '@react-native-picker/picker';\nimport { LinearGradient } from 'expo-linear-gradient';\n// import HorizontalPicker from 'react-native-horizontal-picker';\n\nimport firebase from 'firebase';\n\n\nexport default function MeditateTimerSetScreen({ navigation, route }) {\n  const [minutes, setMinutes] = useState(10);\n  const [bellIntervDisplay, setBellIntervDisplay] = useState(\"30 Seconds\");\n  const [bellInterv, setBellInterv] = useState(30000);\n\n  const { userToken } = useContext(AuthContext);\n\n  // const { bgImage } = route.params;\n\n  // const renderMinsPickerItems = () => {\n  //   let items = [];\n  //   for (let i = 1; i <= 60; i++) {\n  //     items.push(<Picker.Item key={i} label={`${i}`} value={`${i}`}/>)\n  //   }\n  //   return items;\n  // }\n\n  const renderMinsPickerItems = () => {\n    let items = [];\n    for (let i = 1; i <= 60; i++) {\n      // if (i == 0 || i % 5 == 0) {\n      //   // items.push(<Text key={i}>{i}</Text>)\n      // } else {\n      //   items.push(<Image key={i} source={require('../../../assets/meditate-timer-set/bar-1.png')} resizeMode=\"contain\" style={{margin: 3, height: 18}} />)\n      // }\n      items.push(<Image key={i} source={require('../../../assets/meditate-timer-set/bar-1.png')} resizeMode=\"contain\" style={{margin: 3, height: 18}} />)\n      // items.push(<Text key={i}> | </Text>)\n    }\n    return items;\n  }\n\n  // const renderSecsPickerItems = () => {\n  //   let items = [];\n  //   for (let i = 30; i <= 90; i+=30) {\n  //     items.push(<Picker.Item key={i} label={`${i}s`} value={`${i}`}/>)\n  //   }\n  //   return items;\n  // }\n\n  const renderSecsPickerItems = () => {\n    let items = [];\n    for (let i = 30; i <= 90; i+=30) {\n      items.push(<Text key={i}> | </Text>)\n    }\n    return items;\n  }\n\n  const onChange = async (value) => {\n    if (value > 0 && value <= 60) {\n      setMinutes(value)\n\n      if (value !== minutes) {\n        await Haptics.selectionAsync();\n      }\n    }\n  }\n\n  const onChangeSecs = async (value) => {\n    const bellOptions = {\n      // \"30 Seconds\": 5000, // short 5 sec test\n      \"30 Seconds\": 30000,\n      \"60 Seconds\": 60000,\n      \"90 Seconds\": 90000,\n      \"2 Minutes\": 120000,\n      \"3 Minutes\": 180000,\n      \"5 Minutes\": 300000,\n      \"OFF\": null\n    }\n    let bellArray = Object.keys(bellOptions);\n    if (value >= 0 && value < 7) {\n      setBellIntervDisplay(bellArray[value])\n      setBellInterv(bellOptions[bellArray[value]])\n\n      if (bellArray[value] !== bellIntervDisplay) {\n        await Haptics.selectionAsync();\n        // console.log(value);\n      }\n    }\n    // console.log(bellIntervDisplay)\n    // console.log(bellInterv)\n  }\n\n  const isFocused = useIsFocused();\n\n  let [fontsLoaded] = useFonts({\n    'Assistant': require('../../../assets/fonts/Assistant/Assistant-VariableFont_wght.ttf'),\n    'Assistant-Regular': require('../../../assets/fonts/Assistant/static/Assistant-Regular.ttf'),\n    'Assistant-SemiBold': require('../../../assets/fonts/Assistant/static/Assistant-SemiBold.ttf'),\n  });\n\n\n  const currUser = firebase.auth().currentUser;\n  const progressRef = currUser ? firebase.database().ref(currUser.uid).child('progress') : null;\n\n// WITH SAFETY CHECK ADDED - for users with no existing progress data objects\n  // Increment current and best streaks - triggers when blue 'Start' button is pressed\n  const incrementStreak = async () => {\n    if (currUser ) {\n      let currentStreakSoFar;\n      let lastDateExercised;\n      let bestStreakSoFar;\n\n      await progressRef.once('value', async snapshot => {\n        if (await snapshot.val() === null) {\n          progressRef.set({\n            practiceTime: 0,\n            sessionsCompleted: 0,\n            currentStreak: 1,\n            bestStreak: 1,\n            lastDateExercised: new Date().getDate(),\n            bestStreakDate: new Date().getDate(),\n            bestStreakMonth: new Date().getMonth() + 1,\n            bestStreakYear: new Date().getFullYear()\n          })\n          currentStreakSoFar = await snapshot.val() !== null ? snapshot.val().currentStreak : 0;\n          lastDateExercised = await snapshot.val() !== null ? snapshot.val().lastDateExercised : new Date().getDate();\n          bestStreakSoFar = await snapshot.val() !== null ? snapshot.val().bestStreak : 1;\n        } else {\n          currentStreakSoFar = await snapshot.val() !== null ? snapshot.val().currentStreak : 0;\n          lastDateExercised = await snapshot.val() !== null ? snapshot.val().lastDateExercised : new Date().getDate();\n          bestStreakSoFar = await snapshot.val() !== null ? snapshot.val().bestStreak : 1;\n        }\n\n        let dateNow = new Date().getDate();\n        // let dateNow = 26;\n\n        if (dateNow - lastDateExercised > 1 || currentStreakSoFar == 0) {\n          await progressRef.update({\n            currentStreak: 1,\n            bestStreak: Math.max(bestStreakSoFar, currentStreakSoFar),\n            lastDateExercised: dateNow\n          });\n        } else if (dateNow - lastDateExercised === 1 || dateNow - lastDateExercised <= -26) {\n          await progressRef.update({\n            currentStreak: currentStreakSoFar += 1,\n            bestStreak: Math.max(bestStreakSoFar, currentStreakSoFar),\n            lastDateExercised: dateNow\n          });\n        }\n\n        if (bestStreakSoFar < currentStreakSoFar) {\n          await progressRef.update({\n            lastDateExercised: dateNow,\n            bestStreak: Math.max(bestStreakSoFar, currentStreakSoFar),\n            bestStreakDate: new Date().getDate(),\n            bestStreakMonth: new Date().getMonth() + 1,\n            bestStreakYear: new Date().getFullYear()\n          })\n        }\n\n      });\n    } \n  }\n\n  const startMeditation = () => {\n    incrementStreak();\n    setTimeout(() => {\n      navigation.navigate('MeditateExerciseScreen', { minutes, bellInterv, bgImage });\n    }, 0);\n  }\n\n\n\n  return (\n    <ImageBackground source={bgImage} style={{ flex: 1, resizeMode: \"cover\", justifyContent: \"center\" }}>\n      {isFocused ? <StatusBar hidden={false} barStyle=\"light-content\"/> : null} \n      <TouchableOpacity onPress={() => navigation.goBack()} style={{position: \"absolute\", top: height * 0.065, zIndex: 100, padding: 15}}>\n        <Image source={require('../../../assets/screen-icons/back-arrow-white.png')} style={{height: 20, }} resizeMode=\"contain\"/>\n      </TouchableOpacity>\n      <View style={{marginTop: 20}}>\n        <Text style={{textAlign: \"center\", fontSize: 23, fontFamily: \"Assistant-SemiBold\", color: 'white'}}>Meditate</Text>\n        <View style={{flexDirection: \"row\", padding: 20}}>\n          <View style={{backgroundColor: \"white\", flex: 1, height: height * 0.7, borderRadius: 20, justifyContent: \"space-evenly\", alignItems: \"center\" }}>\n\n            <View style={{width: width * 0.63, height: height * 0.45, justifyContent: \"space-around\", alignItems: \"center\", }}>\n              <View style={{alignItems: \"center\"}}>\n                <Image source={require('../../../assets/screen-icons/clock.png')} style={{height: height < 600 ? 30 : 37 }} resizeMode=\"contain\"/>\n                <Text style={{fontFamily: \"Assistant-SemiBold\", fontSize: height < 600 ? 18 : 20, textAlign: \"center\", color: \"#535353\"}}>Session Duration:</Text>\n                <Text style={{fontFamily: \"Assistant-SemiBold\", fontSize: height < 600 ? 20 : 25, textAlign: \"center\", color: \"#535353\"}}>{minutes} {minutes === 1 ? \"Minute\" : \"Minutes\" }</Text>\n                \n                {/* <Picker\n                  style={{borderWidth: 1, width: width * 0.9, height: height * 0.2}}\n                  selectedValue={minutes}\n                  onValueChange={value => onChange(value)}\n                >\n                  {renderMinsPickerItems()}\n                </Picker> */}\n\n                {/* <LinearGradient \n                  colors={['#fff', 'transparent']}\n                  start={[0.1, 0.4]}\n                  // end={[0.1, 1]}\n                  // locations={[0, 1]}\n                  style={{\n                    borderWidth: 1, \n                    height: height * 0.05, \n                    width: 100, \n                    position: \"absolute\", \n                    top: 100, \n                    right: 100, \n                  }}\n                /> */}\n\n                <ScrollView \n                  horizontal={true} \n                  showsHorizontalScrollIndicator={false}\n                  onScroll={(e) => onChange(Math.floor(1 + e.nativeEvent.contentOffset.x / (e.nativeEvent.contentSize.width - e.nativeEvent.layoutMeasurement.width) * 59)) }\n                  // onScroll={(e) => console.log(Math.floor(1 + e.nativeEvent.contentOffset.x / (e.nativeEvent.contentSize.width - e.nativeEvent.layoutMeasurement.width) * 59)) }\n                  /* OG 1.00 = e.nativeEvent.contentOffset.x / (e.nativeEvent.contentSize.width - e.nativeEvent.layoutMeasurement.width) */\n                  scrollEventThrottle={16}\n                  contentOffset={{ x: 100, y: 0 }}\n                  style={{ width: 200, maxHeight: 50 }} \n                >\n                  <View style={{flexDirection: \"row\", alignItems: \"center\",}}>\n                    {renderMinsPickerItems()}\n                  </View>\n                </ScrollView>\n\n              </View>\n              \n              <View style={{alignItems: \"center\"}}>\n                <Image source={require('../../../assets/screen-icons/bell.png')} style={{height: height < 600 ? 26 : 32 }} resizeMode=\"contain\"/>\n                <Text style={{fontFamily: \"Assistant-SemiBold\", fontSize: height < 600 ? 18 : 20, textAlign: \"center\", color: \"#535353\"}}>Bell Sound Every:</Text>\n                <Text style={{fontFamily: \"Assistant-SemiBold\", fontSize: height < 600 ? 20 : 25, textAlign: \"center\", color: \"#535353\"}}>{bellIntervDisplay}</Text>\n                \n\n                <ScrollView \n                  horizontal={true} \n                  showsHorizontalScrollIndicator={false}\n                  onScroll={(e) => onChangeSecs(Math.floor(e.nativeEvent.contentOffset.x / (e.nativeEvent.contentSize.width - e.nativeEvent.layoutMeasurement.width) * 7)) }\n                  // OG 1.00 = e.nativeEvent.contentOffset.x / (e.nativeEvent.contentSize.width - e.nativeEvent.layoutMeasurement.width)\n                  scrollEventThrottle={16}\n                  style={{ width: 200, maxHeight: 50 }} \n                >\n                  <View style={{flexDirection: \"row\", alignItems: \"center\",}}>\n                    {renderMinsPickerItems()}\n                  </View>\n                </ScrollView>\n\n\n                {/* <Picker\n                  style={{borderWidth: 1, width: width * 0.9, height: height * 0.2}}\n                  selectedValue={seconds}\n                  onValueChange={value => onChangeSecs(value)}\n                >\n                  {renderSecsPickerItems()}\n                  <Picker.Item label={`2m`} value={`2`}/>\n                  <Picker.Item label={`3m`} value={`3`}/>\n                  <Picker.Item label={`5m`} value={`5`}/>\n                  <Picker.Item label={`OFF`} value={`OFF`}/>\n                </Picker> */}\n\n              </View>\n            </View>\n\n            <AppButton \n              title=\"Start\" \n              buttonStyles={styles.blueButton}\n              buttonTextStyles={styles.buttonText}\n              onPress={startMeditation}\n            />\n\n          </View>\n        </View>\n      </View>\n    </ImageBackground>\n  )\n}\n\nconst styles = StyleSheet.create({\n  blueButton: {\n    backgroundColor: \"#3681C7\",\n    height: 51,\n    width: 234,\n    borderRadius: 17,\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    shadowRadius: 7,\n    shadowColor: \"black\",\n    shadowOpacity: 0.2,\n    shadowOffset: {width: 3, height: 3}\n  },\n  buttonText: {\n    color: \"#fff\",\n    flex: 1,\n    textAlign: \"center\",\n    fontSize: 22,\n    letterSpacing: 1,\n    fontFamily: \"Assistant-SemiBold\"\n  }\n});"]},"metadata":{},"sourceType":"module"}